{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);\n  util.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);\n  util.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\nexport const batchNorm4d = op({\n  batchNorm4d_\n});","map":{"version":3,"names":["convertToTensor","util","batchNorm","op","batchNorm4d_","x","mean","variance","offset","scale","varianceEpsilon","$x","$mean","$variance","$scale","$offset","assert","rank","batchNorm4d"],"sources":["../../src/ops/batchnorm4d.ts"],"sourcesContent":[null],"mappings":"AAiBA,SAAQA,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,SAAS,QAAO,aAAa;AACrC,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;AAWA,SAASC,YAAYA,CACjBC,CAAsB,EAAEC,IAAkC,EAC1DC,QAAsC,EACtCC,MAAqC,EAAEC,KAAoC,EAC3EC,eAAwB;EAC1B,MAAMC,EAAE,GAAGX,eAAe,CAACK,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;EAC/C,MAAMO,KAAK,GAAGZ,eAAe,CAACM,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC;EACxD,MAAMO,SAAS,GAAGb,eAAe,CAACO,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC;EACpE,IAAIO,MAAyB;EAC7B,IAAIL,KAAK,IAAI,IAAI,EAAE;IACjBK,MAAM,GAAGd,eAAe,CAACS,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC;;EAEvD,IAAIM,OAA0B;EAC9B,IAAIP,MAAM,IAAI,IAAI,EAAE;IAClBO,OAAO,GAAGf,eAAe,CAACQ,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC;;EAE1DP,IAAI,CAACe,MAAM,CACPL,EAAE,CAACM,IAAI,KAAK,CAAC,EACb,MAAM,sDAAsD,GACxD,GAAGN,EAAE,CAACM,IAAI,GAAG,CAAC;EACtBhB,IAAI,CAACe,MAAM,CACPJ,KAAK,CAACK,IAAI,KAAK,CAAC,IAAIL,KAAK,CAACK,IAAI,KAAK,CAAC,EACpC,MAAM,0DAA0D,GAC5D,YAAYL,KAAK,CAACK,IAAI,GAAG,CAAC;EAClChB,IAAI,CAACe,MAAM,CACPH,SAAS,CAACI,IAAI,KAAK,CAAC,IAAIJ,SAAS,CAACI,IAAI,KAAK,CAAC,EAC5C,MAAM,0DAA0D,GAC5D,gBAAgBJ,SAAS,CAACI,IAAI,GAAG,CAAC;EAC1C,IAAIH,MAAM,IAAI,IAAI,EAAE;IAClBb,IAAI,CAACe,MAAM,CACPF,MAAM,CAACG,IAAI,KAAK,CAAC,IAAIH,MAAM,CAACG,IAAI,KAAK,CAAC,EACtC,MAAM,uDAAuD,GACzD,gBAAgBH,MAAM,CAACG,IAAI,GAAG,CAAC;;EAEzC,IAAIF,OAAO,IAAI,IAAI,EAAE;IACnBd,IAAI,CAACe,MAAM,CACPD,OAAO,CAACE,IAAI,KAAK,CAAC,IAAIF,OAAO,CAACE,IAAI,KAAK,CAAC,EACxC,MAAM,wDAAwD,GAC1D,gBAAgBF,OAAO,CAACE,IAAI,GAAG,CAAC;;EAE1C,OAAOf,SAAS,CAACS,EAAE,EAAEC,KAAK,EAAEC,SAAS,EAAEE,OAAO,EAAED,MAAM,EAAEJ,eAAe,CAAC;AAC1E;AAEA,OAAO,MAAMQ,WAAW,GAAGf,EAAE,CAAC;EAACC;AAAY,CAAC,CAAC"},"metadata":{},"sourceType":"module"}