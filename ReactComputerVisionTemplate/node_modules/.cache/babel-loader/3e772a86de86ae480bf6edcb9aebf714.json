{"ast":null,"code":"var _jsxFileName = \"/Users/abbykaur/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/DetectionPage.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { nextFrame } from \"@tensorflow/tfjs\"; // 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\n\nimport { drawRect } from \"./utilities\";\nimport { Link } from 'react-router-dom';\n\nfunction DetectionPage() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // Main function\n\n  const runCoco = async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\n    const net = await tf.loadGraphModel('https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json'); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // 4. TODO - Make Detections\n\n      const img = tf.browser.fromPixels(video);\n      const resized = tf.image.resizeBilinear(img, [640, 480]);\n      const casted = resized.cast('int32');\n      const expanded = casted.expandDims(0);\n      const obj = await net.executeAsync(expanded);\n      console.log(obj);\n      const boxes = await obj[1].array();\n      const classes = await obj[2].array();\n      const scores = await obj[4].array(); // Draw mesh\n\n      const ctx = canvasRef.current.getContext(\"2d\"); // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n\n      requestAnimationFrame(() => {\n        drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx);\n      });\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    muted: true,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 8,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/video-recording\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, \"Record your own video!\"))));\n}\n\nexport default DetectionPage;","map":{"version":3,"sources":["/Users/abbykaur/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/DetectionPage.js"],"names":["React","useRef","useState","useEffect","tf","Webcam","nextFrame","drawRect","Link","DetectionPage","webcamRef","canvasRef","runCoco","net","loadGraphModel","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","img","browser","fromPixels","resized","image","resizeBilinear","casted","cast","expanded","expandDims","obj","executeAsync","console","log","boxes","array","classes","scores","ctx","getContext","requestAnimationFrame","dispose","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,WAAP;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;AACA;;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,aAAT,GAAyB;AACvB,QAAMC,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMU,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB,CAFuB,CAIvB;;AACA,QAAMW,OAAO,GAAG,YAAY;AAC1B;AACA;AACA;AACA,UAAMC,GAAG,GAAG,MAAMT,EAAE,CAACU,cAAH,CAAkB,6FAAlB,CAAlB,CAJ0B,CAM1B;;AACAC,IAAAA,WAAW,CAAC,MAAM;AAChBC,MAAAA,MAAM,CAACH,GAAD,CAAN;AACD,KAFU,EAER,IAFQ,CAAX;AAGD,GAVD;;AAYA,QAAMG,MAAM,GAAG,MAAOH,GAAP,IAAe;AAC5B;AACA,QACE,OAAOH,SAAS,CAACO,OAAjB,KAA6B,WAA7B,IACAP,SAAS,CAACO,OAAV,KAAsB,IADtB,IAEAP,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA;AACA,YAAMD,KAAK,GAAGR,SAAS,CAACO,OAAV,CAAkBC,KAAhC;AACA,YAAME,UAAU,GAAGV,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBE,UAA3C;AACA,YAAMC,WAAW,GAAGX,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBG,WAA5C,CAJA,CAMA;;AACAX,MAAAA,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBI,KAAxB,GAAgCF,UAAhC;AACAV,MAAAA,SAAS,CAACO,OAAV,CAAkBC,KAAlB,CAAwBK,MAAxB,GAAiCF,WAAjC,CARA,CAUA;;AACAV,MAAAA,SAAS,CAACM,OAAV,CAAkBK,KAAlB,GAA0BF,UAA1B;AACAT,MAAAA,SAAS,CAACM,OAAV,CAAkBM,MAAlB,GAA2BF,WAA3B,CAZA,CAcA;;AACA,YAAMG,GAAG,GAAGpB,EAAE,CAACqB,OAAH,CAAWC,UAAX,CAAsBR,KAAtB,CAAZ;AACA,YAAMS,OAAO,GAAGvB,EAAE,CAACwB,KAAH,CAASC,cAAT,CAAwBL,GAAxB,EAA6B,CAAC,GAAD,EAAK,GAAL,CAA7B,CAAhB;AACA,YAAMM,MAAM,GAAGH,OAAO,CAACI,IAAR,CAAa,OAAb,CAAf;AACA,YAAMC,QAAQ,GAAGF,MAAM,CAACG,UAAP,CAAkB,CAAlB,CAAjB;AACA,YAAMC,GAAG,GAAG,MAAMrB,GAAG,CAACsB,YAAJ,CAAiBH,QAAjB,CAAlB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAEA,YAAMI,KAAK,GAAG,MAAMJ,GAAG,CAAC,CAAD,CAAH,CAAOK,KAAP,EAApB;AACA,YAAMC,OAAO,GAAG,MAAMN,GAAG,CAAC,CAAD,CAAH,CAAOK,KAAP,EAAtB;AACA,YAAME,MAAM,GAAG,MAAMP,GAAG,CAAC,CAAD,CAAH,CAAOK,KAAP,EAArB,CAxBA,CA0BA;;AACA,YAAMG,GAAG,GAAG/B,SAAS,CAACM,OAAV,CAAkB0B,UAAlB,CAA6B,IAA7B,CAAZ,CA3BA,CA6BA;AACA;;AACAC,MAAAA,qBAAqB,CAAC,MAAI;AAACrC,QAAAA,QAAQ,CAAC+B,KAAK,CAAC,CAAD,CAAN,EAAWE,OAAO,CAAC,CAAD,CAAlB,EAAuBC,MAAM,CAAC,CAAD,CAA7B,EAAkC,GAAlC,EAAuCrB,UAAvC,EAAmDC,WAAnD,EAAgEqB,GAAhE,CAAR;AAA6E,OAAnF,CAArB;AAEAtC,MAAAA,EAAE,CAACyC,OAAH,CAAWrB,GAAX;AACApB,MAAAA,EAAE,CAACyC,OAAH,CAAWlB,OAAX;AACAvB,MAAAA,EAAE,CAACyC,OAAH,CAAWf,MAAX;AACA1B,MAAAA,EAAE,CAACyC,OAAH,CAAWb,QAAX;AACA5B,MAAAA,EAAE,CAACyC,OAAH,CAAWX,GAAX;AAED;AACF,GA9CD;;AAgDA/B,EAAAA,SAAS,CAAC,MAAI;AAACS,IAAAA,OAAO;AAAG,GAAhB,EAAiB,EAAjB,CAAT;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEF,SADP;AAEE,IAAA,KAAK,EAAE,IAFT;AAGE,IAAA,KAAK,EAAE;AACLoC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLC,MAAAA,WAAW,EAAE,MAHR;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,SAAS,EAAE,QANN;AAOLC,MAAAA,MAAM,EAAE,CAPH;AAQL9B,MAAAA,KAAK,EAAE,GARF;AASLC,MAAAA,MAAM,EAAE;AATH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAiBE;AACE,IAAA,GAAG,EAAEZ,SADP;AAEE,IAAA,KAAK,EAAE;AACLmC,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLC,MAAAA,WAAW,EAAE,MAHR;AAILC,MAAAA,IAAI,EAAE,CAJD;AAKLC,MAAAA,KAAK,EAAE,CALF;AAMLC,MAAAA,SAAS,EAAE,QANN;AAOLC,MAAAA,MAAM,EAAE,CAPH;AAQL9B,MAAAA,KAAK,EAAE,GARF;AASLC,MAAAA,MAAM,EAAE;AATH,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBF,eA+BE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,kBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,CA/BF,CADF,CADF;AAuCD;;AAED,eAAed,aAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { nextFrame } from \"@tensorflow/tfjs\";\n// 2. TODO - Import drawing utility here\n// e.g. import { drawRect } from \"./utilities\";\nimport {drawRect} from \"./utilities\"; \nimport { Link } from 'react-router-dom';\n\nfunction DetectionPage() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Main function\n  const runCoco = async () => {\n    // 3. TODO - Load network \n    // e.g. const net = await cocossd.load();\n    // https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json\n    const net = await tf.loadGraphModel('https://tensorflowjsrealtimemodel.s3.au-syd.cloud-object-storage.appdomain.cloud/model.json')\n    \n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video)\n      const resized = tf.image.resizeBilinear(img, [640,480])\n      const casted = resized.cast('int32')\n      const expanded = casted.expandDims(0)\n      const obj = await net.executeAsync(expanded)\n      console.log(obj)\n\n      const boxes = await obj[1].array()\n      const classes = await obj[2].array()\n      const scores = await obj[4].array()\n      \n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)  \n      requestAnimationFrame(()=>{drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx)}); \n\n      tf.dispose(img)\n      tf.dispose(resized)\n      tf.dispose(casted)\n      tf.dispose(expanded)\n      tf.dispose(obj)\n\n    }\n  };\n\n  useEffect(()=>{runCoco()},[]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          muted={true} \n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 8,\n            width: 640,\n            height: 480,\n          }}\n        />\n        <Link to=\"/video-recording\">\n        <button>Record your own video!</button>\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default DetectionPage;\n"]},"metadata":{},"sourceType":"module"}