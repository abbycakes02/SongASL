{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      console.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":{"version":3,"names":["env","getGlobal","kernelRegistry","Map","gradRegistry","getKernel","kernelName","backendName","key","makeKey","get","getGradient","getKernelsForBackend","it","entries","result","done","value","next","config","backend","split","push","registerKernel","has","console","warn","set","registerGradient","getBool","unregisterKernel","Error","delete","unregisterGradient","copyRegisteredKernels","registeredBackendName","newBackendName","kernels","forEach","kernelConfig","newKernelConfig","Object","assign"],"sources":["../src/kernel_registry.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module"}