{"ast":null,"code":"var _jsxFileName = \"/Users/abbykaur/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/VideoRecordingPage.js\";\nimport React, { useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\n\nfunction VideoRecordingPage() {\n  const webcamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [capturing, setCapturing] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const handleStartCaptureClick = React.useCallback(() => {\n    setCapturing(true);\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\n      mimeType: 'video/webm'\n    });\n    mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n    mediaRecorderRef.current.start();\n  }, [webcamRef, setCapturing, mediaRecorderRef]);\n  const handleDataAvailable = React.useCallback(({\n    data\n  }) => {\n    if (data.size > 0) {\n      setRecordedChunks(prev => prev.concat(data));\n    }\n  }, [setRecordedChunks]);\n  const handleStopCaptureClick = React.useCallback(() => {\n    mediaRecorderRef.current.stop();\n    setCapturing(false);\n  }, [mediaRecorderRef, webcamRef, setCapturing]);\n  const handleDownload = React.useCallback(() => {\n    if (recordedChunks.length) {\n      const blob = new Blob(recordedChunks, {\n        type: 'video/webm'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      document.body.appendChild(a);\n      a.style = 'display: none';\n      a.href = url;\n      a.download = 'react-webcam-stream-capture.webm';\n      a.click();\n      window.URL.revokeObjectURL(url);\n      setRecordedChunks([]);\n    }\n  }, [recordedChunks]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), capturing ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStopCaptureClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Stop Capture\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleStartCaptureClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Start Capture\"), recordedChunks.length > 0 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDownload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Download\"));\n}\n\nexport default VideoRecordingPage;","map":{"version":3,"sources":["/Users/abbykaur/RealTimeSignLanguageDetectionwithTFJS/ReactComputerVisionTemplate/src/VideoRecordingPage.js"],"names":["React","useRef","useState","Webcam","VideoRecordingPage","webcamRef","mediaRecorderRef","capturing","setCapturing","recordedChunks","setRecordedChunks","handleStartCaptureClick","useCallback","current","MediaRecorder","stream","mimeType","addEventListener","handleDataAvailable","start","data","size","prev","concat","handleStopCaptureClick","stop","handleDownload","length","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","download","click","window","revokeObjectURL"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\nimport Webcam from 'react-webcam';\n\nfunction VideoRecordingPage() {\n  const webcamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [capturing, setCapturing] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n\n  const handleStartCaptureClick = React.useCallback(() => {\n    setCapturing(true);\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\n      mimeType: 'video/webm'\n    });\n    mediaRecorderRef.current.addEventListener(\n      'dataavailable',\n      handleDataAvailable\n    );\n    mediaRecorderRef.current.start();\n  }, [webcamRef, setCapturing, mediaRecorderRef]);\n\n  const handleDataAvailable = React.useCallback(\n    ({ data }) => {\n      if (data.size > 0) {\n        setRecordedChunks((prev) => prev.concat(data));\n      }\n    },\n    [setRecordedChunks]\n  );\n\n  const handleStopCaptureClick = React.useCallback(() => {\n    mediaRecorderRef.current.stop();\n    setCapturing(false);\n  }, [mediaRecorderRef, webcamRef, setCapturing]);\n\n  const handleDownload = React.useCallback(() => {\n    if (recordedChunks.length) {\n      const blob = new Blob(recordedChunks, {\n        type: 'video/webm'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      document.body.appendChild(a);\n      a.style = 'display: none';\n      a.href = url;\n      a.download = 'react-webcam-stream-capture.webm';\n      a.click();\n      window.URL.revokeObjectURL(url);\n      setRecordedChunks([]);\n    }\n  }, [recordedChunks]);\n\n  return (\n    <div>\n      <Webcam audio={false} ref={webcamRef} />\n      {capturing ? (\n        <button onClick={handleStopCaptureClick}>Stop Capture</button>\n      ) : (\n        <button onClick={handleStartCaptureClick}>Start Capture</button>\n      )}\n      {recordedChunks.length > 0 && (\n        <button onClick={handleDownload}>Download</button>\n      )}\n    </div>\n  );\n}\n\nexport default VideoRecordingPage;\n"]},"metadata":{},"sourceType":"module"}